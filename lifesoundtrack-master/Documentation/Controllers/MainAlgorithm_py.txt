FUNCTIONS


*** MainAlgorithm ***

- Once the user data is saved, this function is called to show, as the result of it, the proposed playlist to the user.

- During the flow of this function different calls to other functions are done. These other functions are explained in more detail below.

- First “load_user_information” is called and then the “direct_songs” one that gets the songs specified by the user in the data entry form. After that, the maximum number of artist’s songs, the number of songs per artist and if similar songs are needed are defined by the function “get_num_artist_songs”. Then, it calls “similarity_songs” and “indirect_songs” to get the similar songs and the indirect songs respectively. And, at the end, “create_spotify_playlist” and “save_playlist_to_db” functions are called before the “results” html is rendered with the playlist, the playlist url and user id.

*** load_user_information ***

- This function returns a user fulfilled with all its information.

- First, it creates a user. Then, it takes the user ids and its personal data like the name, the birth year, the birth place and the places where he/she lived. After that, it gets the preferred genres, instruments, dancing, songs, this songs’ artists and other favorite artists. All this information is added to the created user which is returned at the end of the function.

*** direct_songs ***

- This function adds all the songs defined by the user to the playlist.

- First of all, it defines the number of direct songs that must be added to the playlist. Then, for each song specified by the user, it verifies that the song title isn’t empty. If that’s the case, it tries to get the song from Spotify or form the project songs database in order to add it to the playlist. If the song can’t be found in any of the two ways, it is added to the not found songs logger.

*** get_num_artist_songs ***

- This function returns 3 values: maximum number of artist’s songs, number of songs per artist and a boolean to define if similar songs should be searched.

- First of all, if the playlist is empty (NO direct songs added) and the user hasn’t defined any artists means that we don’t have any artists preferred by the user. It’s not possible to look for songs or similarities, so the numbers will be 0 and the boolean FALSE.
Otherwise, if we have some artists and if there’s space in the playlist for 5 or more songs it leaves some space for similar songs. If the space available is lower than 5 songs, it just fills the playlist with user’s preferred artists’ songs.
After that, it defines the number of songs per artist only if needed. At the beginning it defines this number with the constant value established in the project. Then it calculates the number of artists required. If the user hasn’t defined enough artists, it adds artists from the direct songs’ artists. Otherwise, if the user has defined more artists than needed, it recalculates the number of songs per artist.

*** artist_songs ***

- This function gets songs from the user’s preferred artists and they are added to the playlist.

- First, an empty array of songs to append to the playlist is created. Then, for each user’s preferred artist, it calls “spotify_search” function that looks for songs of the artist in Spotify. If the function returns a non-empty list, the needed number of songs are added to the array. Otherwise, it looks for songs of the artist in the database including a checking on duplicates that is not done in the Spotify search.
After that, it calls “add_to_playlist” function to add these tracks to the playlist.

*** similarity_songs ***

- This function gets songs from artists that are similar to the user’s preferred ones.

- First of all, it recalculates the number of similar songs needed to fulfill the playlist and how many total artists and similar artists per artist we’ll need if we only get 1 song per artist.
Then, it creates an empty similarity song list and for each user artist it searches in Spotify for similar artist. And for each one of those similar artists it also searches in Spotify their songs and it adds them to the similarity song list (the Spotify searches are done by using the “spotify_search” function).
At the end, the number of similar of artist’s tracks needed are added to the playlist with the “add_to_playlist” function.

*** spotify_search ***

- This function is called to search in Spotify a track, an artist’s song list or a list of similar artists.

- TRACK: First, it defines an Spotify query to look for the song and, if possible, the artist. Then, it looks into the query results to find some track title more than 0.75 similar to the given one for the search. At the end, the artist is added to the user’s direct song artists list if not duplicated and the song is returned.

- ARTIST’S SONG LIST: First, it defines an Spotify query to look for the artist. Then, it looks into the query results if the artist name is more than 0.85 similar to the given one for the search. If so, it saves the artist URI for later use in similar artists search, it gets the artist’s top track for Spain searching by URI and it adds these tracks to artist’s song list that is returned.

- SIMILAR ARTISTS: First, it searches related artists in Spotify. Then, it checks that these similar artists are already in the playlist or the similar artists list. At the end, if they are not duplicated, it adds them to the similar artists list which is returned.

*** is_duplicated_song ***

- This function checks for duplicated songs and returns a boolean.

- It checks if there is more than 0.7 grade similarity between artist’s name and title’s name given and those in the playlist or if the names given are part of the playlist ones. If that’s the case the song is considered as duplicated.

*** is_duplicated_artist ***

- This function checks for duplicated artists and returns a boolean.

- First it checks if there is some song of the same artist in the playlist, and if it finds any the artist is considered duplicated and returned.
If the artist is not found in the playlist, it checks if the artist is in the similar artists list and if it’s found there is considered duplicated and returned.

*** add_to_playlist ***

- This function adds a track to the local playlist.

- First, it checks that there isn’t any song to the playlist with the same title. If that’s the case, it creates a new song with its title, preview, Spotify id and artist and, at the end, this new song is added to the playlist.

*** create_spotify_playlist ***

- This function is used to create an Spotify playlist with the local playlist.

- It tries to generate Spotify’s OAuth access token with the constants defined in the project and to catch this token. It uses this token or the one passed through the function to authorize Spotify. Then, it creates Spotify playlist, it gets the tracks Spotify ids, it adds the tracks to the Spotify playlist and the playlist url is returned.

*** save_playlist_to_db ***

- This function saves the playlist to the Users DB.

- First, it load the user. Then, for each track in the playlist it creates a new UserSong and it adds the following information: title, artist, preview, Spotify id and playlist position (index). After that, the song is saved and added to the user’s playlist. When all the tracks are added, playlist url is added to the user and, at the end, the user is also saved.

*** indirect_songs ***

- NOT DONE -